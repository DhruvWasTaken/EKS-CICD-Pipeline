version: 0.2
run-as: root
env:
  variables:
    IMAGE_TAG_NODE: AppName-Node.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
    IMAGE_TAG_CRYS: AppName-Cry.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
    IMAGE_TAG_FRONT: AppName-Front.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
  exported-variables:
    - IMAGE_TAG_NODE
    - IMAGE_TAG_CRYS
    - IMAGE_TAG_FRONT
    - IMAGE_REPO_NAME
phases:

  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - chmod +x prereqs.sh
      - sh prereqs.sh

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME

  build:
    commands:
      - echo Build started on `date`
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - IMAGE_TAG_NODE=AppName-Node.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
      - IMAGE_TAG_CRYS=AppName-Cry.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
      - IMAGE_TAG_FRONT=AppName-Front.$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 12)
      - echo $IMAGE_TAG_NODE
      - echo $IMAGE_TAG_CRYS
      - echo $IMAGE_TAG_FRONT
      - echo $IMAGE_REPO_NAME
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG_NODE ecsdemo-nodejs/.
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG_CRYS ecsdemo-crystal/.
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG_FRONT ecsdemo-frontend/.
      # - docker tag nodejs:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_NODE
      # - docker tag crystal:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_CRY
      # - docker tag frontend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_FRONT

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG_NODE
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG_CRYS
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG_FRONT
      - out=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_NODE
      - echo $out
      - CODEBUILD_SRC_DIR="$(pwd)"
      - echo $CODEBUILD_SRC_DIR
      - echo $out >> $CODEBUILD_SRC_DIR/output.json
    #   - echo "............................................................"
    #   - cat $CODEBUILD_SRC_DIR/output.json
    #   - echo "............................................................"

artifacts:
  files:
    - output.json
